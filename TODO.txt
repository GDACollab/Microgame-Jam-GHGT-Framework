For working with Harlowe: https://github.com/ChapelR/harlowe-macro-api/blob/master/src/macro.js and https://foss.heptapod.net/games/harlowe/-/blob/branch/default/js/macros.js are pretty useful references.

Future Improvements:
- Convert .ini to .toml. It's a similar format, but supports more useful things.

- More Twine Story Formats

- Upgrade to Typescript

- Transition animator GUI of some kind (or automated in Blender)

- For Godot, add Brotli or .gzip compressions to builds to reduce filesize? Include web server in extension so that people can easily test out their results?

Relevant guide for Brotli: https://gist.github.com/Calinou/30f21f07017d908fc74c7eccb3f469c3 Should work with new version, provided web server is configured correctly?

Relevant guide for GZIP: https://www.reddit.com/r/godot/comments/8b67lb/guide_how_to_compress_wasmpck_file_to_make_html5/ Needs to be updated to use new builds.

- Asynchronous loading across extensions. Requires analysis of each engine though, and finding the exact point in their .wasm or .js file to pause until they're ready to play. Honestly it would be a huge pain, and we'd end up losing support for a lot of .JS engines (since we'd have to each configure them manually). Possible idea: Run the iframes in some kind of VM, find the exact point where "gameStart" is ready to go, then load that state into the iframe? I have no idea how that'd work in-browser though. I mean, if there were some way to pause iframes, it would be a whole lot simpler.

- Same as above, but for changing volume for each iframe? (Not supported by current web standards, I believe)

- NPM package for developers to test their games within the framework?

- Change config.ini and CCSS animations to be "compiled" instead of read/assembled on the fly (through Webpack or something similar). Allows me to remove even more hacky setTimeout solutions for adding HTML.

- Move to a framework that allows for better UI design (in retrospect, I think config.ini is... well it's a mediocre solution.) Something like React or Sveltekit. The one advantage of being at a fixed resolution is that it makes the design much easier, so maybe switching to some kind of visual editor would be great for designers, and mixing that with a javascript framework for designing UIs.

- Overhaul of Input.js. It suuuuuucks because I made/am making it last-minute. And it shows.

To fix right now:
- Settings menu
 - Add images for each game?
- Menu sounds for keyboard controls
- Check browser compatibility
- Add dry run games

CSS Wishlist:
- While I'm busy working with a ton of CSS, there are some things I'd really love to see in future iterations of... I guess either CCSS or just future versions of CSS. I doubt these will ever get taken seriously (especially in this obscure README file), but here's hoping!
- Actual color blending options (i.e., for picking how gradients go from one color to another instead of just linearly.)
- All the features I gave to CCSS but better (because it'll be an actual proper implementation instead of hacking variables together)
- Content-transition (activate a transition when CSS detects a change in the innerText of an HTML element)
- Global position properties (like, where is an element ACTUALLY on screen? Read-only, based on the element's offset and position properties).
- Being able to use the hover and active properties DURING animations or transitions. Like some kind of additive properties instead of outright replacing them?
- Being able to rank priorities for styles instead of using !important
- Advanced filtering. Like being able to programatically define how an element is rendered pixel by pixel.