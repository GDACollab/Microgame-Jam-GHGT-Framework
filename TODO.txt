Fix gameinterface and microgamecontroller to allow for setting of custom difficulty and lives (and a function for detecting whether or not the game is being played in the web
browser, so people can add restarting code for their minigames)

- Allow "WinWithTransition()" or "LoseWithTransition()" to allow for microgames that want to show some kind of animation?
- Signal when game is ready to restart (or force. Should be for dev/solo builds)?
- Disable "Run in background" option for all engines to allow for async loading? (Does this even work?)
- BETTER IDEA: I think for Unity, the game loads, but doesn't actually start until the Iframe removes the "hidden" attribute. Does this work with all games? What about really big games? Check to see if we can do async loading with this.

Future Improvements:
For Godot, add Brotli or .gzip compressions to builds to reduce filesize? Include web server in extension so that people can easily test out their results?

Relevant guide for Brotli: https://gist.github.com/Calinou/30f21f07017d908fc74c7eccb3f469c3 Should work with new version, provided web server is configured correctly?

Relevant guide for GZIP: https://www.reddit.com/r/godot/comments/8b67lb/guide_how_to_compress_wasmpck_file_to_make_html5/ Needs to be updated to use new builds.

Asynchronous loading across extensions. Requires analysis of each engine though, and finding the exact point in their .wasm or .js file to pause until they're ready to play. Honestly it would be a huge pain, and we'd end up losing support for a lot of .JS engines (since we'd have to each configure them manually). Possible idea: Run the iframes in some kind of VM, find the exact point where "gameStart" is ready to go, then load that state into the iframe? I have no idea how that'd work in-browser though. I mean, if there were some way to pause iframes, it would be a whole lot simpler.