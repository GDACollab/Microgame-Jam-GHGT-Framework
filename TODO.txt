For working with Harlowe: https://github.com/ChapelR/harlowe-macro-api/blob/master/src/macro.js and https://foss.heptapod.net/games/harlowe/-/blob/branch/default/js/macros.js are pretty useful references.

Future Improvements:
- More Twine Story Formats

- Upgrade to typescript?

- Transition animator workflow

- For Godot, add Brotli or .gzip compressions to builds to reduce filesize? Include web server in extension so that people can easily test out their results?

Relevant guide for Brotli: https://gist.github.com/Calinou/30f21f07017d908fc74c7eccb3f469c3 Should work with new version, provided web server is configured correctly?

Relevant guide for GZIP: https://www.reddit.com/r/godot/comments/8b67lb/guide_how_to_compress_wasmpck_file_to_make_html5/ Needs to be updated to use new builds.

- Asynchronous loading across extensions. Requires analysis of each engine though, and finding the exact point in their .wasm or .js file to pause until they're ready to play. Honestly it would be a huge pain, and we'd end up losing support for a lot of .JS engines (since we'd have to each configure them manually). Possible idea: Run the iframes in some kind of VM, find the exact point where "gameStart" is ready to go, then load that state into the iframe? I have no idea how that'd work in-browser though. I mean, if there were some way to pause iframes, it would be a whole lot simpler.

- Same as above, but for changing volume for each iframe?

- NPM package for developers to test their games within the framework?

- Change config.ini and CCSS animations to be compiled instead of read on the fly

To fix right now:
- Settings menu (volume for main menu? Select microgames, controller remappings)
 - Reformat CSS so it looks nice
 - Add enable/disable buttons for each game
 - Add key bindings to "all".
 - Save data to local storage
 - Add "reset to defaults" button.
 - Add images for each game?
- Fix start button
- Difficulty changing/game loading logic (Rotating queue of unique games, difficulty increases, difficulty of 1 if it's your first time playing a game)
- Game over screen on 0 lives
- Send any keyboard inputs from the body to the iframe.
- Add dry run games
- Minify all .js and .css for web build?
- NW.js for desktop builds (breaks itch.io's API). Or maybe my itch.io desktop app is broken.

CSS Wishlist:
- While I'm busy working with a ton of CSS, there are some things I'd really love to see in future iterations of... I guess either CCSS or just future versions of CSS. I doubt these will ever get taken seriously (especially in this obscure README file), but here's hoping!
- Actual color blending options (i.e., for picking how gradients go from one color to another instead of just linearly.)
- All the features I gave to CCSS but better (because it'll be an actual proper implementation instead of hacking variables together)
- Content-transition (activate a transition when CSS detects a change in the innerText of an HTML element)
- Global position properties (like, where is an element ACTUALLY on screen? Read-only, based on the element's offset and position properties).
- Being able to use the hover and active properties DURING animations or transitions. Like some kind of additive properties instead of outright replacing them?
- Being able to rank priorities for styles instead of using !important